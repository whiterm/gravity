---

- hosts: all
  become: yes
  tasks:
    - name: Enable EPEL Repository on CentOS 8
      dnf:
        name: epel-release
      when:
        - ansible_facts['os_family'] == 'RedHat'
        - ansible_facts['distribution_major_version'] == '8'
    - name: Enable EPEL Repository on CentOS 7
      yum:
        name: epel-release
      when:
        - ansible_facts['os_family'] == 'RedHat'
        - ansible_facts['distribution_major_version'] == '7'

    - name: Install required packages
      package:
        name:
          - curl
          - htop
          - iotop
          - lsof
          - ltrace
          - mc
          - net-tools
          - strace
          - tcpdump
          - telnet
          - vim
          - wget
          - chrony
          - traceroute

    - name: Install required packages for RedHat family
      package:
        name:
          - cloud-utils-growpart
      when:
        - ansible_facts['os_family'] == 'RedHat'

    - name: Install required packages for Debian family
      package:
        name:
          - cloud-guest-utils
      when:
        - ansible_facts['os_family'] == 'Debian'

    - name: Set up default opscenter hostname
      lineinfile:
        dest: /etc/hosts
        line: "{{ansible_default_ipv4.gateway}} opscenter.localhost.localdomain"

    - name: Load bridge netfilter module
      modprobe:
        name: br_netfilter

    - name: Load bridge netfilter module on start
      copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        content: "br_netfilter"

    - name: Set bridge netfilter kernel parameters on start
      sysctl:
        sysctl_file: /etc/sysctl.d/10-br-netfilter.conf
        value: 1
        reload: yes
        name: "{{ item }}"
      with_items:
        - net.bridge.bridge-nf-call-arptables
        - net.bridge.bridge-nf-call-ip6tables
        - net.bridge.bridge-nf-call-iptables

    - name: Find root disk
      shell: mount -l | grep ' on / type ' | head -n1
      register: root_mount

    - set_fact:
        partition_path: "{{ root_mount.stdout.split(' ')[0] }}"
        disk_fstype: "{{ root_mount.stdout.split(' ')[4] }}"
    - set_fact:
        disk_path: "{{ partition_path | regex_search('(/dev/\\w+)\\d+', '\\1') | first }}"
        partition_number: "{{ partition_path | regex_search('/dev/\\w+(\\d+)', '\\1') | first }}"
    - debug:
        msg: "partition_path: {{ partition_path }} disk_path: {{ disk_path }} fs_type: {{ disk_fstype }} partition: {{ partition_number }}"

    - name: Grow partition until maximum
      shell: "growpart /dev/sda {{ partition_number }}"
      register: growpart
      ignore_errors: true

    - name: Extend the FS
      when: growpart.rc == 0
      filesystem:
        fstype: "{{ disk_fstype }}"
        dev: "{{ partition_path }}"
        resizefs: yes
